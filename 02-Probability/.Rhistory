sapply(strsplit(as.character(dat$Creation.Date),split=" "),function(x){
x[1]
})
#Read in Data
require(chron)
dat<-read.csv("C:/Users/Ben/Desktop/SysSource.csv")
tail(dat)
#last record is an error
dat<-dat[,-2461]
#split date and time columns
dat$Date <- sapply(strsplit(as.character(dat$Creation.Date),split="M "),function(x){
x[2]
})
dat$Time<-sapply(strsplit(as.character(dat$Creation.Date),split=" "),function(x){
x[1]
})
system('git config --global -list')
system('git config --global --list')
system('git config --global -list')
system("git config --global -list')
system("git config --global -list")
system("git config --global-list")
system("git config --global --list")
system("git config --global --l")
sum(856+765)
856 + 756 #Which implicitely computes:
sum(856+765)
104*187
prod(104*187)
prod(104*187)
1/(12+47)
1/12+47 == 1/(12+47)
c(x,y)
x<-c(1,2,3,4,5)
c(x,y)
y<-c(12, 17, 9, 11)
c(x,y)
g<-seq(11,333,3)
g[68]
g[c(68,79)]
1/(5+10) + 1/(6*46)
sum(1/(5+10) + 1/(6*46))
log(8)
log(8)^(1/3)
log10(8)^(1/3)
?cut
cut(x,2)
x<-0:100
cut(x,2)
levels(cut)
levels(b)
b<-cut(x,2)
levels(b)
b<-cut(x,3)
b
b<-cut(x,3,dig.label=4)
b
b<-cut(x,3,dig.label=2)
b
b<-cut(x,3,dig.label=1)
b
b<-cut(x,3,dig.label=0)
b
b<-cut(x,3,dig.lab=0)
b
b<-cut(x,3,dig.lab=1)
b
b<-cut(x,3,dig.lab=2)
b
b<-cut(x,3,dig.lab=3)
b
b<-cut(x,3,dig.lab=2)
b<-cut(x,3,dig.lab=4)
b
b<-cut(x,3,dig.lab=5)
b
b<-cut(x,c(0,25,50,75,100))
b
levels(b)
df <- data.frame(id = c("Jason","Paul","Mary", "Robert","Toby","Nina","Robin","James"), x = 1:10, y = rnorm(10))
mtcars[mtcars$cyl = 4, ]
mtcars[mtcars$cyl == 4, ]
head(x)
x<-mtcars[mtcars$cyl == 4, ]
head(x)
mtcars[-1:4, ]
x<-mtcars[-c(1:4), ]
head(x)
mtcars[mtcars$cyl <= 5]
x<-mtcars[mtcars$cyl <= 5]
x<-mtcars[mtcars$cyl <= 5,]
head(x)
mtcars[mtcars$cyl == 4 | 6, ]
print("mtcars[1:20] calls the first 20 positions, but does not specify any columns")
library(ggplot2)
data(diamonds)
ncol(diamonds)
nrow(diamonds)
str(diamonds)
dim(diamonds)
small_diamonds<-diamonds[c(1:9,19:23),]
head(diamonds)
diamonds[diamonds$cut==Ideal,]
diamonds[diamonds$cut=="Ideal",]
nrow(diamonds[diamonds$cut==Ideal,])
nrow(diamonds[diamonds$cut=="Ideal",])
mod <- lm(mpg ~ wt, data = mtcars)
str(mod)
summary(mod)
mod$residuals
install.packages("phyloorchard",repos="http://R-Forge.R-project.org")
install.packages("phyloOrchard",repos="http://R-Forge.R-project.org")
install.packages("PhyloOrchard",repos="http://R-Forge.R-project.org")
library(PhyloOrchard)
?PhyloOrchard
data(BinindaEmondsEtAl2007)
plot(BinindaEmondsEtAl2007[[1]],show.node.label=TRUE)
BinindaEmondsEtAl2007[[1]]
tree$tip.labels
tree<-BinindaEmondsEtAl2007[[1]]
tree$tip.labels
tree$tip.label
tree$tip.label %in% "Dipodomys_merriami"
which(tree$tip.label %in% "Dipodomys_merriami")
which(tree$tip.label %in% "chaetodipus baileyi")
which(tree$tip.label %in% "Chaetodipus_baileyi")
which(tree$tip.label %in% "Dipodomys_merriami")
which(tree$tip.label %in% "Chaetodipus_baileyi")
trx[1407,1391]
trx<-cophentic(tree)
require(ape)
trx<-cophentic(tree)
trx<-cophenetic(tree)
trx[1407,1391]
tree
sum(trx)
which(tree$tip.label %in% "Dipodomys_merriami")
which(tree$tip.label %in% "Chaetodipus_baileyi")
trx["Dipodomys_merriami","Chaetodipus_baileyi"]
trx[1,5]
?prune.taxa
?prune
require(picante)
library(PhyloOrchard)
data(BinindaEmondsEtAl2007)
plot(BinindaEmondsEtAl2007[[1]],show.node.label=TRUE)
tree<-BinindaEmondsEtAl2007[[1]]
which(tree$tip.label %in% "Dipodomys_merriami")
which(tree$tip.label %in% "Chaetodipus_baileyi")
prune.sample(tree,Dipodomys_merriami","Chaetodipus_baileyi)
prune.sample(tree,"Dipodomys_merriami","Chaetodipus_baileyi")
prune.sample(tree,c("Dipodomys_merriami","Chaetodipus_baileyi"))
?prune.sample
prune.sample(phylo=tree,x=c("Dipodomys_merriami","Chaetodipus_baileyi"))
d<-matrix(nrow=1,ncol=2)
rownames(d)<-("Dipodomys_merriami","Chaetodipus_baileyi")
rownames(d)<-c("Dipodomys_merriami","Chaetodipus_baileyi")
colnames(d)<-c("Dipodomys_merriami","Chaetodipus_baileyi")
prune.sample(phylo=tree,x=d)
prune.sample(phylo=tree,samp=d)
tree.p<-prune.sample(phylo=tree,samp=d)
plot(tree.p)
tree.p
colnames(d)<-c("Dipodomys_merriami","Chaetodipus_baileyi","Peromyscus_eremicus","Dipodomys_ordii")
#prune the tree
d<-matrix(nrow=1,ncol=4)
colnames(d)<-c("Dipodomys_merriami","Chaetodipus_baileyi","Peromyscus_eremicus","Dipodomys_ordii")
#prune the tree
tree.p<-prune.sample(phylo=tree,samp=d)
plot(tree.p)
tree.p
d<-matrix(nrow=1,ncol=3)
colnames(d)<-c("Dipodomys_merriami","Chaetodipus_baileyi","Peromyscus_eremicus")
#prune the tree
tree.p<-prune.sample(phylo=tree,samp=d)
plot(tree.p)
PhyloOrchard
?PhyloOrchard
?data
data(PhyloOrchard)
?PhyloOrchard
??PhyloOrchard
?PhyloOrchard::
data()
tree<-read.tree("C:/Users/Ben/Desktop/Smith_2011_angiosperms.txt")
tree
which(tree$tip.label %in% "Columnea")
require(dismo)
?getData
getwd()
elev<-getData(name="alt",res=10)
elev<-getData('alt',country=c("ECU","COL"),res=10)
elev<-getData('alt',country=c("ECU"),res=10)
elev<-getData('alt',country=c("ECU"))
require(slidify)
17 * 43
7^3
a<-25
b<-28
b-a
x<-7
y<-10
x*y*y
rnorm(1,1,0)
rnorm(n=1,mean=1,sd=0)
rpois(100,3)
mean(rpois(100,3))
mean(rpois(1000,3))
?pnorm
dnorm(-1.96,mean=0,sd=1)
pnorm(-1.96,mean=0,sd=1)
?hist
?mnorm
??multinomial
rmultinom
rmultinom()
rmultinom(1)
rmultinom(size=1)
rmultinom(n=1,size=2,prob=.5)
rmultinom(n=1,size=2,prob=.5)
rmultinom(n=10000,size=2,prob=.5)
rmultinom(n=10000,size=2)
rmultinom(n=10000,size=3,prob=.33)
require(slidify)
print("hi")
require(slidify)
head(traits)
traits<-read.csv("C:/Users/Ben/Documents/GitHub/IntroR/05-DataExploration/Traits.csv",row.names=1)
traits
dim(traits)
traits$clade
traits$Clade
levels(traits$Clade)
levels(droplevels(traits$Clade))
clades<-levels(traits$Clade)
for (x in clades){
cladeD<-traits[traits$Clade == x,]
#Get the row of the species with the largest bill
rowL<-which.max(cladeD$Bill)
#Get the fow of species with the smallest bill
rowS<-which.min(cladeD$Bill)
#Subset the clade data to get those rows
CladeD[c(rowL,rowS),]
}
for (x in clades){
cladeD<-traits[traits$Clade == x,]
#Get the row of the species with the largest bill
rowL<-which.max(cladeD$Bill)
#Get the fow of species with the smallest bill
rowS<-which.min(cladeD$Bill)
#Subset the clade data to get those rows
cladeD[c(rowL,rowS),]
}
out<-data.frame()
#Get a list of all the clades
clades<-levels(traits$Clade)
clades
#Create a blank list to store outputs
out<-data.frame()
#For each clade, subset the trait matrix to get just members of that clade
for (x in 1:length(clades)){
cladetoSelect<-clades[x]
print(cladetoSelect)
cladeD<-traits[traits$Clade == cladetoSelect,]
#Get the row of the species with the largest bill
rowL<-which.max(cladeD$Bill)
#Get the fow of species with the smallest bill
rowS<-which.min(cladeD$Bill)
#Subset the clade data to get those rows
out<-rbind(out,cladeD[c(rowL,rowS),])
}
out
ggplot(out,aes(x=Clade,y=Bill)) + geom_line()
require(ggplot2)
ggplot(out,aes(x=Clade,y=Bill)) + geom_line()
ggplot(triats,aes(x=Clade,y=Bill)) + geom_line()
ggplot(traits,aes(x=Clade,y=Bill)) + geom_line()
ggplot(traits,aes(x=Mass,y=Bill)) + geom_line()
ggplot(traits,aes(x=Mass,y=Bill,groups=Clade)) + geom_line()
ggplot(traits,aes(x=Mass,y=Bill,group=Clade)) + geom_line()
ggplot(traits,aes(x=Mass,y=Bill,group=Clade)) + geom_density()
ggplot(traits,aes(x=Mass,y=Bill,group=Clade)) + geom_boxplot()
ggplot(traits,aes(x=Mass,y=Bill,group=Genus)) + geom_boxplot()
ggplot(traits,aes(x=Mass,y=Bill,group=Genus)) + geom_boxplot() + ylim(0,15)
ggplot(traits,aes(x=Mass,y=Bill,col=Genus)) + geom_boxplot() + ylim(0,15)
ggplot(traits,aes(x=Mass,y=Bill,col=Genus)) + geom_boxplot()
ggplot(traits,aes(x=Mass,y=Bill,col=Genus)) + geom_crossbar()
traits$w_m<-traits$Wing_Chord/traits$Mass
head(traits)
traits$Wing_Chord/traits$Mass
traits$w_m<-traits$WingChord/traits$Mass
ggplot(traits,aes(x=Species,y=w_m,col=Clade)) + geom_point()
ggplot(traits,aes(x=Species,y=w_m,col=Clade)) + geom_point() + geom_smooth()
ggplot(traits,aes(x=Species,y=w_m,col=Clade)) + geom_point() + geom_smooth(aes(group=1))
ggplot(traits,aes(x=Genus,y=w_m,col=Clade)) + geom_point() + geom_smooth(aes(method=1))
ggplot(traits,aes(x=Genus,y=w_m,col=Clade)) + geom_point() + geom_smooth(aes(group=1))
ggplot(traits,aes(x=Genus,y=w_m,col=Clade)) + geom_point() + geom_smooth(aes(group=1),method="lm")
ggplot(traits,aes(x=Genus,y=w_m,col=Clade)) + geom_point() + geom_smooth()
ggplot(traits,aes(x=Genus,y=w_m,col=Clade)) + geom_point() + geom_smooth(aes(group=1))
ggplot(traits,aes(x=Species,y=w_m,col=Genus)) + geom_point() + geom_smooth(aes(group=1)) + facet_grid(~Clade)
ggplot(traits,aes(x=Species,y=w_m,col=Genus)) + geom_point() + geom_smooth(aes(group=1)) + facet_grid(~Clade,scales="free")
ggplot(traits,aes(x=Species,y=w_m,col=Genus)) + geom_point() + geom_smooth(aes(group=1)) + facet_wrap(~Clade,scales="free")
ggplot(traits,aes(x=Species,y=w_m,col=Genus)) + geom_point() + geom_smooth(aes(group=1),method="lm") + facet_wrap(~Clade,scales="free")
ggplot(traits,aes(x=Species,y=w_m)) + geom_point() + geom_smooth(aes(group=1),method="lm") + facet_wrap(~Clade,scales="free")
ggplot(traits,aes(x=Mass,y=WingChord)) + geom_point()
ggplot(traits,aes(x=Mass,y=WingChord,col=Genus)) + geom_point()
ggplot(traits,aes(x=Mass,y=WingChord,col=Clade)) + geom_point()
ggplot(traits,aes(x=Mass,y=WingChord,col=Clade)) + geom_point() + geom_smooth(method="lm")
ggplot(traits,aes(x=Mass,y=WingChord,col=Clade)) + geom_point() + geom_smooth(method="lm",aes(group=1))
ggplot(traits,aes(x=Mass,y=WingChord,col=Clade)) + geom_point() + geom_smooth(method="lm",aes(group=1)) + ylim(0,20)
ggplot(traits,aes(x=Mass,y=WingChord,col=Clade)) + geom_point() + geom_smooth(method="lm",aes(group=1)) + xlim(0,20)
ggplot(traits,aes(x=Mass,y=WingChord,col=Clade)) + geom_point() + geom_smooth(method="lm",aes(group=1)) + xlim(0,20) + facet_wrap(~Clade)
ggplot(traits,aes(x=Mass,y=WingChord,col=Clade)) + geom_point() + geom_smooth(method="lm",aes(group=1)) + facet_wrap(~Clade)
table(traits$Genus)
tapply(traits$Bill ~ traits$Genus,var)
?tapply
tapply(traits,Bill ~ Genus,FUN=var)
for (names(sp_g))
genus<-names(sp_g)[i]
sp_g<-table(traits$Genus)
i=1
genus<-names(sp_g)[i]
traits[traits$Genus == genus,]
genus_t<-traits[traits$Genus == genus,]
var(genus_t$Bill)
#Find the number of species in a genus using a cotingency table
sp_g<-table(traits$Genus)
for (i in 1:length(names(sp_g)){
genus<-names(sp_g)[i]
#subset the data for that genus
genus_t<-traits[traits$Genus == genus,]
#Get the variance in bill size and place it in an output
sp_g[i,"Var_bill"]<-var(genus_t$Bill)
}
for (i in 1:length(names(sp_g))){
genus<-names(sp_g)[i]
#subset the data for that genus
genus_t<-traits[traits$Genus == genus,]
#Get the variance in bill size and place it in an output
sp_g[i,"Var_bill"]<-var(genus_t$Bill)
}
sp_g
data.frame(sp_g)
#Find the number of species in a genus using a cotingency table
sp_g<-data.frame(table(traits$Genus))
for (i in 1:length(names(sp_g))){
genus<-names(sp_g)[i]
#subset the data for that genus
genus_t<-traits[traits$Genus == genus,]
#Get the variance in bill size and place it in an output
sp_g[i,"Var_bill"]<-var(genus_t$Bill)
}
sp_g
i
head(sp_g)
sp_g<-data.frame(table(traits$Genus))
#name the columns
colnames(sp_g)<-c("Genus","N")
for (i in 1:length(names(sp_g$))){
genus<-names(sp_g)[i]
#subset the data for that genus
genus_t<-traits[traits$Genus == genus,]
#Get the variance in bill size and place it in an output
sp_g[i,"Var_bill"]<-var(genus_t$Bill)
}
for (i in 1:nrow(sp_g)){
genus<-names(sp_g)[i]
#subset the data for that genus
genus_t<-traits[traits$Genus == genus,]
#Get the variance in bill size and place it in an output
sp_g[i,"Var_bill"]<-var(genus_t$Bill)
}
sp_g
i
#Find the number of species in a genus using a cotingency table
sp_g<-data.frame(table(traits$Genus))
#name the columns
colnames(sp_g)<-c("Genus","N")
for (i in 1:nrow(sp_g)){
genus<-sp_g[i,"Genus"]
#subset the data for that genus
genus_t<-traits[traits$Genus == genus,]
#Get the variance in bill size and place it in an output
sp_g[i,"Var_bill"]<-var(genus_t$Bill)
}
sp_g
ggplot(sp_g,aes(x=N,y=Var_bill))
ggplot(sp_g,aes(x=N,y=Var_bill)) + geom_point()
ggplot(sp_g,aes(x=N,y=Var_bill)) + geom_point() + geom_smooth()
ggplot(sp_g,aes(x=N,y=Var_bill)) + geom_point() + geom_smooth() + ylim(0,12)
ggplot(sp_g,aes(x=N,y=Var_bill)) + geom_point() + geom_smooth(method="lm") + ylim(0,12)
head(traits)
ggplot(traits,aes(x=Mass))
ggplot(traits,aes(x=Mass)) + geom_density()
ggplot(traits,aes(x=Mass,col=Clade)) + geom_density()
ggplot(traits,aes(x=Mass,fill=Clade)) + geom_density()
ggplot(traits,aes(x=WingChord,fill=Clade)) + geom_density()
ggplot(traits,aes(x=WingChord,fill=Clade)) + geom_histogram()
ggplot(traits,aes(x=WingChord,fill=Clade)) + geom_histogram() + facet_wrap(~Clade)
ggplot(traits,aes(x=WingChord,fill=Mass)) + geom_histogram() + facet_wrap(~Clade)
ggplot(traits,aes(x=Bill,col=Bill/Mass)) + geom_histogram() + facet_wrap(~Clade)
ggplot(traits,aes(x=Bill,fill=Bill/Mass)) + geom_histogram() + facet_wrap(~Clade)
require(sliidfy)
require(slidify)
3
3
3
3
3
3
3*3
3*3
3*3
a<-12*180
a
x*y*y
x*y*y
x<-8
y<-6
x*y*y
d<-c("a",3,2)
d
as.numeric(a)
as.numeric(d)
a<-1:1000
1:10
1:10000
1:10000
c(a,b)
a<-9
b<-12
c(a,b)
c<-8
c(a,b)
rm(c)
seq(1,27,.5)
a<-seq(1,27,.5)
a[9]
a[12]
a[c(9,12)]
?sum
help(sum)
?seq
?range
library("analogue", lib.loc="C:/Users/Ben/Documents/R/win-library/3.0")
detach("package:analogue", unload=TRUE)
require(slidify)
c(1,2,3,4,5,6,7,8,9,10)
a<-c(1,2,3,4,5,6,7,8,9,10)
a
1:10
10:1
10:-2
seq(1,27,.5)
?seq
seq(to=1,from=27,by=.5)
seq(to=1,from=27)
seq(to=1,from=27,by=.5)
seq(to=1,from=27,by=3)
seq(from=1,to=27,by=.5)
seq(to=27,from=1,by=.5)
?rnorm
??robust
??robust regression
??"robustregression"
??"robust regression"
dnorm(x=-1.96)
?hist
hist(nnrom(100))
hist(rnorm(100))
hist(rnorm(100),breaks=seq(-1,1,.1))
hist(rnorm(100),breaks=seq(-5,5,.1))
hist(rnorm(100),breaks=seq(-5,5,1))
hist(rnorm(100,breaks=seq(-5,5,.1)))
a<-rnorm(100)
hist(a,breaks=seq(-5,5,.1))
dnorm(x,2.5)
x<-seq(0,1,.1)
dnorm(x,2.5)
plot(x,y)
y<-dnorm(x,2,.5)
plot(x,y)
plot(x,y,type="l")
x<-seq(0,4,.01)
y<-dnorm(x,2,.5)
plot(x,y,type="l")
?plot
?sample
x<-seq(0,4,.01)
x
y<-dnorm(x,2,.5)
y
length(x)
length(y)
plot(x,y,type="l")
dnorm(.01,2,.5)
dnorm(.02,2,.5)
x<-seq(0,4,.01)
x
y<-dnorm(x,2,.5)
y
plot(x,y,type="l")
nrorm(100)
rnorm(100)
a<-rnorm(100)
plot(a)
which.max(a)
a[which.max(a)]
require(slidify)
getwd()
setwd("C:/Users/Ben/Documents/GitHub/IntroR/02-Probability/")
slidify("index.Rmd")
